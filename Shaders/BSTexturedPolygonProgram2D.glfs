//Texture Color
uniform vec4 BSTextureColor;

//Texture Unit
uniform sampler2D BSTextureUnit;

#if __VERSION__ >= 130

//Texture coordinate
in vec2 textureCoordinates;
in float isCircleGLFS;
in float isDarkGLFS;
in vec3 bodyCoordinates;
in float CircleRadiusGLFS;

in float ScaleSizeGLFS;

//Final color
out vec4 gl_FragColor;

out float isFlakeGLFS;
#else

//Texture coordinate
varying vec2 textureCoordinates;
varying float isCircleGLFS;
varying float isDarkGLFS;
varying vec3 bodyCoordinates;
varying float CircleRadiusGLFS;


varying float ScaleSizeGLFS;

varying float isFlakeGLFS;
#endif

void main()
{
	//Set fragment
	//daca nu este nici o culoare atunci randez textura

    if(isCircleGLFS == 0.0)
    {
        //if(texture2D( BSTextureUnit, textureCoordinates ) != 0.0)
        {
            gl_FragColor = texture2D( BSTextureUnit, textureCoordinates ) * BSTextureColor;
        }
        //else
            //daca este o culoare, randez culoarea si nu textura
        {
            //gl_FragColor = BSTextureColor;
        }
    }
    else
        if(isCircleGLFS != 0.0)
        {
            if(isDarkGLFS == 0.0 && isFlakeGLFS == 0.0)
            {
                float border = 0.0 ;
                float radius = CircleRadiusGLFS ;

                vec3 m = bodyCoordinates ;
                float dist = radius - sqrt(m.x * m.x + m.y * m.y);

                float t = 0.0;

                if (dist > border)
                {
                    t = 1.0;
                }
                else
                    if (dist > 0.0)
                    {
                        t = dist / border;
                    }

                //if(texture2D( BSTextureUnit, textureCoordinates ) != 0.0)
                {
                    gl_FragColor = t * texture2D( BSTextureUnit, textureCoordinates ) * BSTextureColor;
                }
                //else
                {
                    //gl_FragColor = t * BSTextureColor;
                }

//            gl_FragColor = texture2D( BSTextureUnit, textureCoordinates ) * BSTextureColor;
            }
            else
                if(isDarkGLFS != 0.0)
                {
                    float radius = float (CircleRadiusGLFS * 32.0);

                    vec3 m = bodyCoordinates * 32.0;
                    float dist = float (radius - sqrt(m.x * m.x + m.y * m.y));

                    float t = 0.0;

                    if (float(dist / radius) <= 1.0)
                    {
                        t = float (1.0 - float(dist / radius));
                    }

                    vec4 color = BSTextureColor;
                    color.a = t;

                    //if(texture2D( BSTextureUnit, textureCoordinates ) != 0.0)
                    {
                        //BSTextureColor.a = t;
                        gl_FragColor = texture2D( BSTextureUnit, textureCoordinates ) * color;
                    }
                    //else
                    {
                        //BSTextureColor.a = t;
                        //gl_FragColor = BSTextureColor;
                    }
                }
                else
                    if(isFlakeGLFS != 0.0)
                    {
                        float radius = CircleRadiusGLFS * 32.0;

                        vec3 m = bodyCoordinates * 32.0;
                        float dist = radius - sqrt(m.x * m.x + m.y * m.y);

                        float t = 0.0;

                        if (float(dist / radius) <= 1.0)
                        {
                            t = float(dist / radius);
                        }

                        t = float(t / 4.0);

                        vec4 color = BSTextureColor;
                        color.a = t;


                        //if(texture2D( BSTextureUnit, textureCoordinates ) != 0.0)
                        {
                            //BSTextureColor.a = t;
                            gl_FragColor = texture2D( BSTextureUnit, textureCoordinates ) * color;
                        }
                        //else
                        {
                            //BSTextureColor.a *= t;
                            //gl_FragColor = BSTextureColor;
                        }

                    }
        }
}
